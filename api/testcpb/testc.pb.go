// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cont_test/api/testcpb/testc.proto

package testcpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LatencyMeasured struct {
	CurrentLat           string   `protobuf:"bytes,1,opt,name=current_lat,json=currentLat,proto3" json:"current_lat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LatencyMeasured) Reset()         { *m = LatencyMeasured{} }
func (m *LatencyMeasured) String() string { return proto.CompactTextString(m) }
func (*LatencyMeasured) ProtoMessage()    {}
func (*LatencyMeasured) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6b2e43d5e618ff7, []int{0}
}

func (m *LatencyMeasured) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LatencyMeasured.Unmarshal(m, b)
}
func (m *LatencyMeasured) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LatencyMeasured.Marshal(b, m, deterministic)
}
func (m *LatencyMeasured) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatencyMeasured.Merge(m, src)
}
func (m *LatencyMeasured) XXX_Size() int {
	return xxx_messageInfo_LatencyMeasured.Size(m)
}
func (m *LatencyMeasured) XXX_DiscardUnknown() {
	xxx_messageInfo_LatencyMeasured.DiscardUnknown(m)
}

var xxx_messageInfo_LatencyMeasured proto.InternalMessageInfo

func (m *LatencyMeasured) GetCurrentLat() string {
	if m != nil {
		return m.CurrentLat
	}
	return ""
}

type CustomImage struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Timestamp            string   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AcheivedAcc          string   `protobuf:"bytes,3,opt,name=acheived_acc,json=acheivedAcc,proto3" json:"acheived_acc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomImage) Reset()         { *m = CustomImage{} }
func (m *CustomImage) String() string { return proto.CompactTextString(m) }
func (*CustomImage) ProtoMessage()    {}
func (*CustomImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6b2e43d5e618ff7, []int{1}
}

func (m *CustomImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomImage.Unmarshal(m, b)
}
func (m *CustomImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomImage.Marshal(b, m, deterministic)
}
func (m *CustomImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomImage.Merge(m, src)
}
func (m *CustomImage) XXX_Size() int {
	return xxx_messageInfo_CustomImage.Size(m)
}
func (m *CustomImage) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomImage.DiscardUnknown(m)
}

var xxx_messageInfo_CustomImage proto.InternalMessageInfo

func (m *CustomImage) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *CustomImage) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *CustomImage) GetAcheivedAcc() string {
	if m != nil {
		return m.AcheivedAcc
	}
	return ""
}

type Targets struct {
	TargetLat            string   `protobuf:"bytes,1,opt,name=target_lat,json=targetLat,proto3" json:"target_lat,omitempty"`
	TargetAcc            string   `protobuf:"bytes,2,opt,name=target_acc,json=targetAcc,proto3" json:"target_acc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Targets) Reset()         { *m = Targets{} }
func (m *Targets) String() string { return proto.CompactTextString(m) }
func (*Targets) ProtoMessage()    {}
func (*Targets) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6b2e43d5e618ff7, []int{2}
}

func (m *Targets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Targets.Unmarshal(m, b)
}
func (m *Targets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Targets.Marshal(b, m, deterministic)
}
func (m *Targets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Targets.Merge(m, src)
}
func (m *Targets) XXX_Size() int {
	return xxx_messageInfo_Targets.Size(m)
}
func (m *Targets) XXX_DiscardUnknown() {
	xxx_messageInfo_Targets.DiscardUnknown(m)
}

var xxx_messageInfo_Targets proto.InternalMessageInfo

func (m *Targets) GetTargetLat() string {
	if m != nil {
		return m.TargetLat
	}
	return ""
}

func (m *Targets) GetTargetAcc() string {
	if m != nil {
		return m.TargetAcc
	}
	return ""
}

type Status struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6b2e43d5e618ff7, []int{3}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*LatencyMeasured)(nil), "testc.LatencyMeasured")
	proto.RegisterType((*CustomImage)(nil), "testc.CustomImage")
	proto.RegisterType((*Targets)(nil), "testc.Targets")
	proto.RegisterType((*Status)(nil), "testc.Status")
}

func init() { proto.RegisterFile("cont_test/api/testcpb/testc.proto", fileDescriptor_c6b2e43d5e618ff7) }

var fileDescriptor_c6b2e43d5e618ff7 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x6d, 0xfa, 0xd1, 0xf6, 0xcb, 0xa4, 0x56, 0x58, 0x4a, 0x29, 0x45, 0xb1, 0xcd, 0xc9, 0x53,
	0x2b, 0x2d, 0x78, 0x14, 0xb4, 0x07, 0x11, 0xea, 0xa5, 0x2d, 0x08, 0x5e, 0xca, 0x64, 0x33, 0xb4,
	0x81, 0x24, 0x1b, 0x76, 0x27, 0x82, 0x3f, 0xce, 0xff, 0x26, 0xd9, 0xac, 0x1a, 0x3c, 0x79, 0xda,
	0xf7, 0xde, 0xcc, 0x3c, 0x66, 0xe7, 0xc1, 0x4c, 0xaa, 0x9c, 0x0f, 0x4c, 0x86, 0x17, 0x58, 0x24,
	0x8b, 0x0a, 0xc8, 0x22, 0xaa, 0xdf, 0x79, 0xa1, 0x15, 0x2b, 0xd1, 0xb1, 0x24, 0x5c, 0xc2, 0xf9,
	0x06, 0x99, 0x72, 0xf9, 0xfe, 0x4c, 0x68, 0x4a, 0x4d, 0xb1, 0xb8, 0x82, 0x40, 0x96, 0x5a, 0x53,
	0xce, 0x87, 0x14, 0x79, 0xec, 0x4d, 0xbd, 0x6b, 0x7f, 0x0b, 0x4e, 0xda, 0x20, 0x87, 0x31, 0x04,
	0xeb, 0xd2, 0xb0, 0xca, 0x9e, 0x32, 0x3c, 0x92, 0x18, 0x42, 0x27, 0xa9, 0x80, 0xed, 0xec, 0x6f,
	0x6b, 0x22, 0x2e, 0xc0, 0xe7, 0x24, 0x23, 0xc3, 0x98, 0x15, 0xe3, 0xb6, 0xf5, 0xf8, 0x11, 0xc4,
	0x0c, 0xfa, 0x28, 0x4f, 0x94, 0xbc, 0x51, 0x7c, 0x40, 0x29, 0xc7, 0xff, 0x6c, 0x43, 0xf0, 0xa5,
	0xdd, 0x4b, 0x19, 0x3e, 0x42, 0x6f, 0x8f, 0xfa, 0x48, 0x6c, 0xc4, 0x25, 0x00, 0x5b, 0xd8, 0x58,
	0xc8, 0xaf, 0x95, 0x0d, 0x72, 0xa3, 0x5c, 0x59, 0xb5, 0x9b, 0xe5, 0xca, 0x68, 0x0a, 0xdd, 0x1d,
	0x23, 0x97, 0x46, 0x8c, 0xa0, 0x6b, 0x2c, 0xb2, 0x1e, 0xff, 0xb7, 0x8e, 0x2d, 0x3f, 0x3c, 0x18,
	0xec, 0xc9, 0xf0, 0x5a, 0xe5, 0xac, 0x55, 0x9a, 0x92, 0x16, 0x2b, 0xf0, 0x77, 0x65, 0x64, 0xa4,
	0x4e, 0x22, 0x12, 0x83, 0x79, 0x7d, 0x39, 0xb7, 0xcf, 0x44, 0x38, 0xde, 0xb8, 0x42, 0xd8, 0xba,
	0xf1, 0xc4, 0x1d, 0x0c, 0xbf, 0x87, 0x5e, 0x12, 0x3e, 0x39, 0xbf, 0x3f, 0xcf, 0xdf, 0x42, 0xe0,
	0xc2, 0x58, 0x63, 0x2a, 0xc5, 0xc8, 0xb5, 0xfd, 0x0a, 0x68, 0x72, 0xe6, 0xf4, 0xfa, 0x57, 0x61,
	0xeb, 0xc1, 0x7f, 0xed, 0xb9, 0x88, 0xa3, 0xae, 0x4d, 0x77, 0xf5, 0x19, 0x00, 0x00, 0xff, 0xff,
	0x64, 0xbd, 0xfc, 0xaf, 0x02, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestControllerClient is the client API for TestController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestControllerClient interface {
	Subscribe(ctx context.Context, in *Targets, opts ...grpc.CallOption) (TestController_SubscribeClient, error)
	SubscribeWithControl(ctx context.Context, in *Targets, opts ...grpc.CallOption) (TestController_SubscribeWithControlClient, error)
	LatencyCalc(ctx context.Context, in *LatencyMeasured, opts ...grpc.CallOption) (*Status, error)
}

type testControllerClient struct {
	cc *grpc.ClientConn
}

func NewTestControllerClient(cc *grpc.ClientConn) TestControllerClient {
	return &testControllerClient{cc}
}

func (c *testControllerClient) Subscribe(ctx context.Context, in *Targets, opts ...grpc.CallOption) (TestController_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestController_serviceDesc.Streams[0], "/testc.TestController/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &testControllerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestController_SubscribeClient interface {
	Recv() (*CustomImage, error)
	grpc.ClientStream
}

type testControllerSubscribeClient struct {
	grpc.ClientStream
}

func (x *testControllerSubscribeClient) Recv() (*CustomImage, error) {
	m := new(CustomImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testControllerClient) SubscribeWithControl(ctx context.Context, in *Targets, opts ...grpc.CallOption) (TestController_SubscribeWithControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestController_serviceDesc.Streams[1], "/testc.TestController/SubscribeWithControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &testControllerSubscribeWithControlClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestController_SubscribeWithControlClient interface {
	Recv() (*CustomImage, error)
	grpc.ClientStream
}

type testControllerSubscribeWithControlClient struct {
	grpc.ClientStream
}

func (x *testControllerSubscribeWithControlClient) Recv() (*CustomImage, error) {
	m := new(CustomImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testControllerClient) LatencyCalc(ctx context.Context, in *LatencyMeasured, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/testc.TestController/LatencyCalc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestControllerServer is the server API for TestController service.
type TestControllerServer interface {
	Subscribe(*Targets, TestController_SubscribeServer) error
	SubscribeWithControl(*Targets, TestController_SubscribeWithControlServer) error
	LatencyCalc(context.Context, *LatencyMeasured) (*Status, error)
}

func RegisterTestControllerServer(s *grpc.Server, srv TestControllerServer) {
	s.RegisterService(&_TestController_serviceDesc, srv)
}

func _TestController_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Targets)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestControllerServer).Subscribe(m, &testControllerSubscribeServer{stream})
}

type TestController_SubscribeServer interface {
	Send(*CustomImage) error
	grpc.ServerStream
}

type testControllerSubscribeServer struct {
	grpc.ServerStream
}

func (x *testControllerSubscribeServer) Send(m *CustomImage) error {
	return x.ServerStream.SendMsg(m)
}

func _TestController_SubscribeWithControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Targets)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestControllerServer).SubscribeWithControl(m, &testControllerSubscribeWithControlServer{stream})
}

type TestController_SubscribeWithControlServer interface {
	Send(*CustomImage) error
	grpc.ServerStream
}

type testControllerSubscribeWithControlServer struct {
	grpc.ServerStream
}

func (x *testControllerSubscribeWithControlServer) Send(m *CustomImage) error {
	return x.ServerStream.SendMsg(m)
}

func _TestController_LatencyCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatencyMeasured)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestControllerServer).LatencyCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testc.TestController/LatencyCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestControllerServer).LatencyCalc(ctx, req.(*LatencyMeasured))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testc.TestController",
	HandlerType: (*TestControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LatencyCalc",
			Handler:    _TestController_LatencyCalc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TestController_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeWithControl",
			Handler:       _TestController_SubscribeWithControl_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cont_test/api/testcpb/testc.proto",
}
